sections_to_merge: ['raw', 'couchdb','train', 'shape', 'tsne','output'],
raw:
{
    csv_data: 'raw/synthetic_word_vectors.csv'
    users_file: 'raw/synthetic_users.csv'
},
input:
{
    csv_contains_pixels: False
    csv_contains_counts: True
    number_of_examples: 100
    number_for_training:60
    number_for_validation:20
    number_for_testing: $input.number_of_examples-$input.number_for_training-$input.number_for_validation
    train_data: 'data/synthetic_vectors.pkl.gz' # data split into train, validate, and test
    render_data: 'data/render_synthetic_vectors.pkl.gz' #data in one numpy array, for purposes of rendering
    render_data_has_labels: True
    render_data_has_multi_labels: False
},
shape:
{
    input_vector_length:34
    mid_layer_sizes: [3]
    inner_code_length: 4
}
,
train:
{

    method:'pcd'
    k:1
    #first_layer_type:'poisson'
    weights_file: "data/fake_txt_weights.pkl.gz"
    skip_trace_during_training: True
    skip_trace_images: True
    train_batch_size:20
    pretraining_epochs:600
    training_epochs:500
},
tsne:
{
    perplexity: 50 #roughly 'the optimal number of neighbours'
    initial_fit_iterations: 300 
},
output:
{
    coords_file: 'out/fake_txt_coords.csv'
    labels_file: 'out/synthetic_labels.csv'
    codes_file: 'out/fake_txt_codes.csv'
    density_plot_file: 'out/fake_txt_map.png'
}
