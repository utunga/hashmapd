sections_to_merge: ['raw', 'couchdb','train', 'shape', 'tsne','output'],
raw:
{
    couch_server_url: 'http://127.0.0.1:5984'
    couch_db: 'fake_txt'
    raw_data_file: 'raw/fake_raw_data.json'
    csv_data: 'raw/fake_txt_word_vectors.csv'
    words_file: 'raw/fake_txt_words.csv'
    users_file: 'raw/fake_txt_users.csv'
},
input:
{
    csv_contains_pixels: False
    csv_contains_counts: True
    number_of_examples: 21
    number_for_training:21
    number_for_validation:0
    number_for_testing: $input.number_of_examples-$input.number_for_training-$input.number_for_validation
    train_data: 'data/fake_txt_vectors.pkl.gz' # data split into train, validate, and test
    render_data: 'data/render_fake_txt_vectors.pkl.gz' #data in one numpy array, for purposes of rendering
    render_data_has_labels: True
    render_data_has_multi_labels: False
},
shape:
{
    input_vector_length: 19
    mid_layer_sizes: [4]
    inner_code_length:4 
}
,
train:
{

    method:'pcd'
    k:1
    #first_layer_type:'poisson'
    weights_file: "data/fake_txt_weights.pkl.gz"
    skip_trace_during_training: True
    skip_trace_images: True
    train_batch_size:1
    pretraining_epochs:600
    training_epochs:500
},
tsne:
{
    perplexity: 2 #roughly 'the optimal number of neighbours'
    initial_fit_iterations:4000 
},
output:
{
    coords_file: 'out/fake_txt_coords.csv'
    labels_file: 'out/fake_txt_labels.csv'
    codes_file: 'out/fake_txt_codes.csv'
    density_plot_file: 'out/fake_txt_map.png'
}
