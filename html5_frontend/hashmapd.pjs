ArrayList points;

void setup() {
    size(512, 512);
    points = new ArrayList;
}

int wait_r = 255;
int wait_g = 255;
int wait_b = 0;

void draw() {
    if (hm_data.points_loaded){
        //hm_debug.push(points);
        loadPoints(hm_data.points);
        background(#ffffff);
        noStroke();
        double scale = hm_data.scale;
        double padding = hm_data.PADDING;
        for (int i = 0; i < hm_data.points.length; i++){
            Point p = points[i];
            hm_debug.push(p);
            fill(255 - p.value * 20,
                 255 - p.value * 20, 255);
            rect(padding + p.x * scale,
                 padding + p.y * scale, scale, scale);
        }
        for (int i = 0; i < hm_data.points.length; i++){
            Point p = points[i];
            if (p.value > 1){
                fill(255 - p.value * 20,
                     255 - p.value * 20, 255);
                rect(padding + p.x * scale,
                     padding + p.y * scale, scale, scale);
            }
        }
        noLoop();
    }
    else {
        background(wait_r, wait_g, wait_b);
        wait_r *= 0.95;
        wait_g *= 0.99;
        wait_b = 255 - (wait_r + wait_g) / 2;
    }
}

class Point {
    int x;
    int y;
    int value;
    Point(int x, int y, int value) {
        this.x = x;
        this.y = y;
        this.value = value;
    }
}

void loadPoints(ArrayList rows){
    int i;
    int max_value = 0;
    for (var i = 0; i < rows.length; i++){
        int x = rows[i][0];
        int y = rows[i][1];
        int value = rows[i][2];
        if (value > max_value){
            max_value = value;
        }
        points[i] = new Point(x, y, value);
    }
}
